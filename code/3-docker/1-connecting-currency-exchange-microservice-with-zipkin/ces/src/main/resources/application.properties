spring.application.name=currency-exchange-server
server.port=8000

# It is necessary, otherwise Error! (For Spring Boot > 2.4.2 ADD this to application.properties)
spring.config.import=optional:configserver:http://localhost:8888

# ERROR AND SOLUTION
# ERROR ==> EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY'RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.
# BUT YOU DO NOT SEE RED WARNING FOR CCS BECAUSE CCS DOES NOT HAVE MULTIPLE INSTANCE, CES HAS MULTIPLE INSTANCE!


# SOLUTION:
eureka.client.serviceURL.defaultZone=http://localhost:8761/eureka

#
# Configuring Resilience4j Retry how many times to retry is run. (There are five Retries right now before -> 3)
#

#NEW
resilience4j.retry.instances.default-sample-api.maxAttempts=5

#OLD
#resilience4j.retry.instances.default-sample-api.maxRetryAttempts=5



# I can configure
# what should be the interval between Retries.
# So if an API call is failing, I would wait
# for a little while and then make the API call again.
# I can configure how much time to wait for.
resilience4j.retry.instances.default-sample-api.waitDuration=1s





# Response takes a little bit more time.
# Why is it taking a little bit more time?
# Because each subsequent request
# it would wait for a little longer. (1s, 2s, 4s, 8s, 16s) (exponentially increasing)
resilience4j.retry.instances.default-sample-api.enableExponentialBackoff=true


# 25-exploring-rate-limiting-and-bulkhead-features-of-resilience4j
# 2 requests per 10 seconds
resilience4j.ratelimiter.instances.default.limitForPeriod=2
resilience4j.ratelimiter.instances.default.limitRefreshPeriod=10s

# Configure how many concurrent calls are allowed.
resilience4j.bulkhead.instances.default.maxConcurrentCalls=1

# for sample every request  => 1.0
# for %5 of request  => 0.05
management.tracing.sampling.probability=1.0
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]